Query: Create 3 new dojos
>>> Dojo.objects.create(name="alpha", city="burbank", state="ca")
<Dojo: Dojo object (1)>
>>> Dojo.objects.create(name="beta", city="las vegas", state="nv")
<Dojo: Dojo object (2)>
>>>Dojo.objects.create(name="omega", city="new york", state="ny")
<Dojo: Dojo object (3)>
 Query: Delete the 3 dojos you just created
>>> Dojo.objects.get(id=1).delete()
(1, {'dojo_ninjas_app.Ninja': 0, 'dojo_ninjas_app.Dojo': 1})
>>> Dojo.objects.get(id=2).delete()
(1, {'dojo_ninjas_app.Ninja': 0, 'dojo_ninjas_app.Dojo': 1})
>>> Dojo.objects.get(id=3).delete()
(1, {'dojo_ninjas_app.Ninja': 0, 'dojo_ninjas_app.Dojo': 1})
>>>
 Query: Create 3 more dojos
>>> Dojo.objects.create(name="gamma", city="glendale", state="ca")
<Dojo: Dojo object (4)>
>>> Dojo.objects.create(name="tims", city="brooklyn", state="ny")
<Dojo: Dojo object (5)>
>>> Dojo.objects.create(name="hula", city="honnolulu", state="hw")
<Dojo: Dojo object (6)>
 Query: Create 3 ninjas that belong to the first dojo
>>> Ninja.objects.create(first_name = "mario", last_name = "bart", dojo = Dojo(4))
<Ninja: Ninja object (1)>
>>> Ninja.objects.create(first_name = "mao", last_name = "loe", dojo = Dojo(4))
<Ninja: Ninja object (2)>
>>> Ninja.objects.create(first_name = "lao", last_name = "doe", dojo = Dojo(4))
<Ninja: Ninja object (3)>
 Query: Create 3 ninjas that belong to the second dojo
>>> Ninja.objects.create(first_name = "lao", last_name = "doe", dojo = Dojo(5))
<Ninja: Ninja object (4)>
>>> Ninja.objects.create(first_name = "lao", last_name = "doe", dojo = Dojo(5))
<Ninja: Ninja object (5)>
>>> Ninja.objects.create(first_name = "maro", last_name = "bart", dojo = Dojo(5))
<Ninja: Ninja object (6)>
 Query: Create 3 ninjas that belong to the third dojo
>>> Ninja.objects.create(first_name = "maro", last_name = "bart", dojo = Dojo(6))
<Ninja: Ninja object (7)>
>>> Ninja.objects.create(first_name = "Iam", last_name = "tired", dojo = Dojo(6))
<Ninja: Ninja object (8)>
>>> Ninja.objects.create(first_name = "berry", last_name = "tired", dojo = Dojo(6))
<Ninja: Ninja object (9)>
 Query: Retrieve all the ninjas from the first dojo
>>> Dojo.objects.first().ninja.all()
<QuerySet [<Ninja: Ninja object (1)>, <Ninja: Ninja object (2)>, <Ninja: Ninja object (3)>]>
 Query: Retrieve all the ninjas from the last dojo
>>> Dojo.objects.last().ninja.all()
<QuerySet [<Ninja: Ninja object (7)>, <Ninja: Ninja object (8)>, <Ninja: Ninja object (9)>]>
>>>
 Query: Retrieve the last ninja's dojo
>>> Ninja.objects.last().dojo
<Dojo: Dojo object (6)>
 Add a new text field called "desc" to your Dojo class +
 Create and run the migration files to update the table in your database. If needed, provide a default value of "old dojo"+
(djangopy3Env) C:\Users\Admin\Desktop\python_stack\my_environments\dojo_ninjas_proj>python manage.py makemigrations
You are trying to add a non-nullable field 'description' to dojo without a default; we can't do that (the database needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: 1
Please enter the default value now, as valid Python
The datetime and django.utils.timezone modules are available, so you can do e.g. timezone.now
Type 'exit' to exit this prompt
>>> "old dojo"
Migrations for 'dojo_ninjas_app':
  dojo_ninjas_app\migrations\0003_dojo_description.py
    - Add field description to dojo
(djangopy3Env) C:\Users\Admin\Desktop\python_stack\my_environments\dojo_ninjas_proj>python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, dojo_ninjas_app, sessions
Running migrations:
  Applying dojo_ninjas_app.0003_dojo_description... OK

(djangopy3Env) C:\Users\Admin\Desktop\python_stack\my_environments\dojo_ninjas_proj>
 Query: Create a new dojo
 >>> Dojo.objects.create(name ="new", city ="georgia", state = "ga", description ="old dojo")
<Dojo: Dojo object (7)>
>>>